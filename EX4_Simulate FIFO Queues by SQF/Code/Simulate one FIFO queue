 // 第七組 10927202 陽彩柔 10927212 趙珀 
#include<iostream>
#include<fstream>  // ifstream
#include<vector>
#include<time.h>   // clock
#include<conio.h>  // getch
#include<iomanip>  // setprecision 

using namespace std ;

struct job ;
struct Abort ;
struct Done ;
class Queue ;
  
bool open = true ; // check the file exist
double readFinish, sortFinish, writeFinish ;
string file_name ;

bool alreadysorted = false ;
string GetNum( ) ;          // get the file number
bool is_Num( string str ) ; // check the string 


void readfile( vector<job> &list ) ; // read sort data
void work( vector<job> list, vector<Done> &Done_List, vector<Abort> &Abort_List, Queue Queue  ) ; // do mission 2
void file_out2( vector<Done> Done_List ,vector<Abort> Abort_List ) ; // write output data

struct job {
  int OID ;
  int Arrival ;
  int Duration ;
  int TimeOut ;
}; // job

struct Done {
	int OID ;
	int Departure ;
	int Delay ;
	int CID ;
}; // Done

struct Abort {
	int OID ;
	int abort ;
	int Delay ;
	int CID ;
}; // Abort

class Queue {
	
private:
	struct Data {
		int OID ;
  	int Arrival ;
  	int Duration ;	
  	int TimeOut ;
  	Data *next ;
	}; // Data
	
	Data *backPtr = NULL ;

public:
	int size = 0 ; // calculate the size of queue 
	bool isEmpty() {
  	if ( backPtr == NULL ) return true ;
  	else return false ;
	} // isEmpty
	
  void enqueue( job newItem ) {
  	Data * newPtr = new Data ;
  	newPtr->OID = newItem.OID ;
  	newPtr->Arrival = newItem.Arrival ;
  	newPtr->Duration = newItem.Duration ;
  	newPtr->TimeOut = newItem.TimeOut ;
  	
  	if( isEmpty() ) newPtr->next = newPtr ;
  	else {
  		newPtr->next = backPtr->next ;  
  		backPtr->next = newPtr ;
		} // else
  	backPtr = newPtr ;
  	++size ;
	} // enqueue
	
  void dequeue( job &queue_info ) {
  	if ( !isEmpty() ) {
  		Data * tempPtr = backPtr->next ;
  		
  		queue_info.OID = tempPtr->OID ;
			queue_info.Arrival = tempPtr->Arrival ;
			queue_info.Duration = tempPtr->Duration ;
			queue_info.TimeOut = tempPtr->TimeOut ;
			
			if ( backPtr == backPtr->next) 	backPtr = NULL ;
			else backPtr->next = tempPtr->next ;
			
			tempPtr->next = NULL ;
			--size ;
			delete tempPtr ;
		} // if
	} // dequeue
	
} ; // Queue


int main() {
  while( true ){
    cout << endl ;
    cout << "** Simulate FIFO Queues by SQF   **" << endl ;
    cout << "*  0. Quit                        *" << endl ;
    cout << "*  1. Sort a file                 *" << endl ;
    cout << "*  2. Simulate one FIFO queue     *" << endl ;
    cout << "*  3. Simulate two queues by SQF  *" << endl ;
    cout << "***********************************" << endl ;
    cout << "Input a command(0,1,2,3):"  ;
    
    string str ;
    cin >> str ;
    
    while( !is_Num(str) ) { // str is not an integer keep input until the command is integer
      cout << "Command does not exist!" << endl ;
      cout << "Input a command(0,1,2,3):" ;
      cin >> str ;
    } // while
    
    int cmd = stoi(str) ; // let str convert to integer
    
    if ( cmd == 0 )
      break ;
    
    else if ( cmd == 2 ) {
    	vector<job> list ;
    	vector<Done> Done_List ;
    	vector<Abort> Abort_List ;
    	Queue Queue ;
    	readfile(list) ;
   		if(open) {
				work( list, Done_List, Abort_List, Queue ) ; // do mission 2
    		file_out2( Done_List, Abort_List ) ;         // write output data
    		cout << endl << "The simulation is running..." << endl <<  "See output" << file_name << ".txt" << endl ;
    	} // if
		} // else if
    
    else cout << "Command does not exist!" << endl ; // cmd is not 1 or 2
  } // while
} // main


void work( vector<job> list, vector<Done> &Done_List, vector<Abort> &Abort_List, Queue Queue  ) { // do mission 2
	int nowTime = 0 ;
	job queue_info ;
	Done temp1 ;
	Abort temp2 ;

	while ( !list.empty() ) { 
		if ( list[0].Arrival >= nowTime ) {
			if( Queue.isEmpty() )	{
				if ( list[0].Arrival >= nowTime ) {
					temp1.OID = list[0].OID ;
					temp1.Departure = list[0].Arrival + list[0].Duration ;
					temp1.Delay = 0 ;
					nowTime = temp1.Departure ;
					Done_List.push_back(temp1) ;
				} // if
			} // if
			
			else { // QUEUE IS NOT EMPTY
				for ( int i = 0 ; !Queue.isEmpty() && list[0].Arrival >= nowTime ; i++ ) {
					Queue.dequeue(queue_info) ;
					if ( queue_info.TimeOut <= ( nowTime ) )	{  //  4.2從佇列取出時發現逾時
						temp2.OID = queue_info.OID ;
						temp2.abort = nowTime ;
						temp2.Delay = nowTime - queue_info.Arrival ;
						Abort_List.push_back(temp2) ;
					} //  if
					
					else if ( queue_info.TimeOut < ( nowTime + queue_info.Duration ) )	{  //  // 4.3 CPU執行過程中發生逾時 
						temp2.OID = queue_info.OID ;
						temp2.abort = queue_info.TimeOut ;
						temp2.Delay = temp2.abort - queue_info.Arrival ;
						Abort_List.push_back(temp2) ;
						if(temp2.abort > nowTime )
							nowTime = temp2.abort ;
					} // else if
						
					else if ( queue_info.TimeOut >= ( nowTime + queue_info.Duration ) ) {
						temp1.OID = queue_info.OID ;
						temp1.Departure = nowTime + queue_info.Duration ;
						temp1.Delay = nowTime - queue_info.Arrival ;
						Done_List.push_back(temp1) ;
						nowTime = temp1.Departure ; 
					} // else if 
							
				} // for
					
				if ( list[0].Arrival >= nowTime ) {
					if ( Queue.isEmpty() ) {
						temp1.OID = list[0].OID ;
						temp1.Departure = list[0].Arrival + list[0].Duration ;
						temp1.Delay = 0 ;
						Done_List.push_back(temp1) ;
						nowTime = temp1.Departure ; 
					} // if()
				} // if()
				 
				else // list[0].Arrival < nowTime
					Queue.enqueue( list[0] ) ;
					
			} // else	( QUEUE IS NOT EMPTY )
			
		} // if ( list[0].Arrival >= nowTime ) 

		else if ( Queue.size == 3 ) {
			temp2.OID = list[0].OID ;
			temp2.abort = list[0].Arrival ;
			temp2.Delay = 0 ;
			Abort_List.push_back(temp2) ; 
		} // else if

		else // list[0].Arrival >= nowTime
			if ( Queue.size < 3 ) Queue.enqueue(list[0]) ;
	
		list.erase( list.begin() ) ;
			
	} // while
	

	while( !Queue.isEmpty() ) {
		Queue.dequeue(queue_info) ;
		
		if ( queue_info.TimeOut <= ( nowTime ) )	{  //  4.2從佇列取出時發現逾時
			temp2.OID = queue_info.OID ;
			temp2.abort = nowTime ;
			temp2.Delay = nowTime - queue_info.Arrival ;
			Abort_List.push_back(temp2) ;
		} //  if
					
		else if ( queue_info.TimeOut < ( nowTime + queue_info.Duration ) )	{  //  // 4.3 CPU執行過程中發生逾時 
			temp2.OID = queue_info.OID ;
			temp2.abort = queue_info.TimeOut ;
			temp2.Delay = temp2.abort - queue_info.Arrival ;
			Abort_List.push_back(temp2) ;
			if(temp2.abort > nowTime )
				nowTime = temp2.abort ;
		} // else if
				
		else if ( queue_info.TimeOut >= ( nowTime + queue_info.Duration ) ) {
			temp1.OID = queue_info.OID ;
			temp1.Departure = nowTime + queue_info.Duration ;
			temp1.Delay = nowTime - queue_info.Arrival ;
			Done_List.push_back(temp1) ;
			nowTime = temp1.Departure ;
		} // else if
		
	} // while
		
} // work


void readfile( vector<job> &list ) { // read file content
	job temp ;
  string OiD, arrival, duration, timeout, final_file_name ;
  ifstream file ;
  
  if( alreadysorted == true ) {
  	final_file_name = "sorted" + file_name + ".txt";
  	file.open( final_file_name, ios::in ) ; // open file
  }//if
  
  else {
 		file_name = GetNum() ;  // Get File Name
  	final_file_name = "sorted" + file_name + ".txt" ;
  	file.open( final_file_name, ios::in ) ; // open file
  } // else

  if ( !file.is_open() ) {
		open = false ;
    cout << endl << final_file_name << " does not exist!" << endl ;
	} // if
	
  else{
  	open = true ;
    file >> OiD >> arrival >> duration >> timeout ;   
    while( !file.eof() ) {
      file >> temp.OID  ;
      file >> temp.Arrival ;
      file >> temp.Duration ;
      file >> temp.TimeOut ;
      if ( !file.fail()) 
        list.push_back(temp) ;	
    } // while
  } // else
  file.close() ;
  alreadysorted = false; 

} // readfile
 
void file_out2( vector<Done> Done_List ,vector<Abort> Abort_List ) { // write data
	fstream file ;
	string final_file_name = "output" + file_name + ".txt" ;
	file.open(final_file_name,ios::out ) ;
	double count=0,count_Success=0,sum_of_Delay = 0,Delay=0,Success=0;
	
	if(!file) cout << "can't open" ;
	
	else {
		file << "\t" << "[Abort Jobs]" << endl ;
		file << '\t' << "OID" << '\t' << "Abort" << '\t' << "Delay" << endl ; // 將資料輸出至檔案 
  	for( int i = 0 ; i < Abort_List.size(); ++i ) {
    	file << "[" << i+1 << "]\t" << Abort_List[i].OID << '\t' << Abort_List[i].abort << '\t' << Abort_List[i].Delay << endl ;
    	count+=1; 
    	sum_of_Delay+=Abort_List[i].Delay;
    }	// for
    	
    file << "\t" << "[Done Jobs]" << endl ;
		file << '\t' << "OID" << '\t' << "Departure" << '\t' << "Delay" << endl ; // 將資料輸出至檔案 
  	for( int i = 0 ; i < Done_List.size(); ++i ) {
    	file << "[" << i+1 << "]\t" << Done_List[i].OID << '\t' << Done_List[i].Departure << '\t' << Done_List[i].Delay << endl ;
    	count+=1; 
    	sum_of_Delay+=Done_List[i].Delay;
    	count_Success+=1;
		} // for	  
	
		Delay = sum_of_Delay/count;
		Success = (count_Success/count)*100;

		file << "[Average Delay] " << setprecision(2) << fixed << Delay	 << " ms"<< endl ;
  	file << "[Success Rate] " << setprecision(2) << fixed << Success << " %"<< endl ;
	} // else
	
	
  file.close();
} // file_out

bool is_Num( string str ) { // check the string input is an integer or not
 
  for( int i = 0 ; i < str.size() ; i++ ) { // input.size can return the length of the string input
    if( str[i] >= '0' && str[i] <= '9' ) // Use ASCII to know whether the input[i] is an integer
      continue ;
    else
      return false ; // String input have an element that is not integer
  } // for
  return true ; // In string input all of the elements are an integer
  
} // is_Num

string GetNum( ) { // Get a number from user and make sure the number no more than
 string input ;
 while(true) {
   cout << "Input a file number (e.g. 401, 402, .....):" ;
   cin >> input ;
   if ( !is_Num( input ) ) // Input is not integer
     cout << "Not an integer Please try again! " << endl ;
   else // Input is an integer
     return input ;
  } // while
} // GetNum
