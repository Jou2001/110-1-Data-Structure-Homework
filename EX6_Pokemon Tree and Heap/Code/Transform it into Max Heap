// 10927202 陽彩柔  10927212 趙珀
#include<iostream>
#include<fstream>  // ifstream
#include <iomanip>
#include<vector>
#include<math.h>

using namespace std ;

struct Data ;

string file_name ;
bool open = true ; // check the file exist
bool use_cmd1_first = false ;
bool use_cmd2_first = false ;

bool is_Num( string str ) ;
string GetNum();
void print( vector<Data> new_list ) ;
void readfile( vector<Data> &list ) ;
void print_2( vector<Data> new_list ) ;
void print_3( vector<Data> new_list ) ;

class Data {
 public:
   int Num ;
   int Number ;
   string Name ;
   string Type ;
   int HP ;
   int Attack ;
   int Defense;
}; // Data

class Pokemon{
 public:
   Pokemon *left = NULL ;
   Pokemon *right = NULL ;
   Data data;
}; // Pokemon

class BST {
 public:
   Pokemon *current = NULL;
   Pokemon *root_HP  ;
   int hp_tree_height = 0 ;
   vector<Data> list;
   
   void HPInsertBST( vector<Data> &list ){
     root_HP = NULL ;
     int i = 0 ;
     while ( i < list.size() ) {
       current = root_HP;
       if (current == NULL) {
         current = new Pokemon() ;
         current->data = list[i];
         root_HP = current ;
       } // if

       else {
         while (true){
           if ( current->data.HP > list[i].HP  ){
             if(current->left == NULL){
               current->left = new Pokemon();
               current->left->data = list[i];
               current = current->left ;
               break;
             } // if
             else
               current = current->left;
           }//if
           
           else if ( current->data.HP <= list[i].HP   ){
             if(current->right == NULL){
               current->right = new Pokemon();
               current->right->data = list[i];
               current = current->right ;
               break;
             } // if
             else
               current = current->right;
           } // else if
         
         }//while
       } //else
       i++;
   }  //while
   
   current = root_HP ;
   if( getheight( current ) == 0 ) cout << "There is no data!"  << endl ;
   else cout << "HP tree height = " << getheight( current ) << endl << endl ;
 } // HPInsertBST

 int num ;
 void preOrderPrint( Pokemon * head ) {
   if ( head != NULL ) {
     cout << '[' << num + 1 << "]\t" << head->data.Number << '\t' << head->data.Name << '\t' ;
     cout << head->data.Type << '\t' << head->data.HP << '\t' << head->data.Attack << '\t' ;
     cout << head->data.Defense << endl ;
     num ++ ;
     preOrderPrint( head->left ) ;
     preOrderPrint( head->right ) ;
   } // if()
 } // preOrderPrint()
 
 void Search_left( Pokemon * cur, vector<Data> new_list ){
   if( cur != NULL ) {
     if ( cur->left != NULL  )
       Search_left( cur->left, new_list ) ;
     else {
       cout << "Leftmost node:" << endl ;
       new_list.push_back(cur->data) ;
       print(new_list) ;
     } // else
   }  // if
 } // Search_left
 
 void Search_right( Pokemon * cur, vector<Data> new_list ){
   if( cur != NULL ) {
     if ( cur->right != NULL  )
       Search_right( cur->right, new_list ) ;
     else {
       cout << "Rightmost node:" << endl ;
       new_list.push_back(cur->data) ;
       print(new_list) ;
     } // else
   }  // if
 } // Search_right

 int getheight( Pokemon * cur ) {
   if ( !cur ) return 0 ;
   else return  max( getheight( cur -> left), getheight( cur -> right) )+1  ;
 } // getheight
 
}; // BST


class Transform {
 public:

 void max_heap( vector<Data> &list ){
   
   for(int pos = list.size()/2 - 1; pos >= 0; pos-- ){
     int change_pos = list.size()+1;
     if ( pos*2+1 < list.size() && pos*2+2 < list.size() && list[pos].HP < list[pos*2+1].HP && list[pos*2+1].HP == list[pos*2+2].HP){
       swap(list[pos], list[pos*2+1] );
       swap(list[pos].Num, list[pos*2+1].Num );
       change_pos = pos*2+1;
     } // if
     
     else if ( pos*2+1 < list.size() && pos*2+2 < list.size() && list[pos].HP < list[pos*2+2].HP && list[pos].HP < list[pos*2+1].HP ){
       if ( list[pos*2+1].HP < list[pos*2+2].HP){
         swap(list[pos], list[pos*2+2] );
         swap(list[pos].Num, list[pos*2+2].Num );
         change_pos = pos*2+2;
       } // if
       else {
         swap(list[pos], list[pos*2+1] );
         swap(list[pos].Num, list[pos*2+1].Num );
         change_pos = pos*2+1;
       } // else
       
     } // else if
     
     else if ( pos*2+2 < list.size() && list[pos].HP < list[pos*2+2].HP ){
       swap(list[pos], list[pos*2+2] );
       swap(list[pos].Num, list[pos*2+2].Num );
       change_pos = pos*2+2;
     } // else if
     
     else if ( pos*2+1 < list.size() && list[pos].HP < list[pos*2+1].HP ){
       swap(list[pos], list[pos*2+1] );
       swap(list[pos].Num, list[pos*2+1].Num );
       change_pos = pos*2+1;
     } // else if
     
     while( change_pos*2+1 < list.size() ) {
       if ( change_pos*2+1 < list.size() && change_pos*2+2 < list.size() && list[change_pos].HP < list[change_pos*2+1].HP && list[change_pos*2+1].HP == list[change_pos*2+2].HP){
         swap(list[change_pos], list[change_pos*2+1] );
         swap(list[change_pos].Num, list[change_pos*2+1].Num );
         change_pos = change_pos*2+1;
       } // if
       
       else if ( change_pos*2+1 < list.size() && change_pos*2+2 < list.size() && list[change_pos].HP < list[change_pos*2+2].HP && list[change_pos].HP < list[change_pos*2+1].HP ){
         if ( list[change_pos*2+1].HP < list[change_pos*2+2].HP){
           swap(list[change_pos], list[change_pos*2+2] );
           swap(list[change_pos].Num, list[change_pos*2+2].Num );
           change_pos = change_pos*2+2;
         } // if
         
         else {
           swap(list[change_pos], list[change_pos*2+1] );
           swap(list[change_pos].Num, list[change_pos*2+1].Num );
           change_pos = change_pos*2+1;
         } // else
       } // else if
       
       else if ( change_pos*2+2 < list.size() &&list[change_pos].HP < list[change_pos*2+2].HP ){
         swap(list[change_pos], list[change_pos*2+2] );
         swap(list[change_pos].Num, list[change_pos*2+2].Num );
         change_pos = change_pos*2+2;
       } // else if
       
        else if ( change_pos*2+1 < list.size() && list[change_pos].HP < list[change_pos*2+1].HP ){
         swap(list[change_pos], list[change_pos*2+1] );
         swap(list[change_pos].Num, list[change_pos*2+1].Num );
         change_pos = change_pos*2+1;
       } // else if
       
       else break;
     } // while
   }//for

 } //max_heap
 
 void search_tree_height(vector<Data> &list, vector<Data> new_list){
   
   int tree_height = log2(list.size() ) + 1;
   
   if(tree_height == 0 ) cout << "There is no data!"  << endl ;
   else cout << "HP tree height = " << tree_height << endl << endl ;
    
   for(int pos = 0; pos <= list.size(); pos=pos*2+1 ){
     if( pos*2+1>list.size() ) {
       cout << "Leftmost node:" << endl ;
       new_list.push_back( list[pos] ) ;
       print_2(new_list);
       break;
     } // if
     
     else continue;
     
   } // for
   
   new_list.clear();
   cout << "Bottom:" << endl ;
   new_list.push_back( list[list.size()-1] ) ;
   print_2(new_list);

 }//search_tree_height
 
 void Delete( vector<Data> &list, vector<Data>new_list) {
   swap(list[0], list[list.size()-1] );
   swap(list[0].Num, list[list.size()-1].Num );
   cout << "The removed root:" << endl ;
   new_list.push_back( list[list.size()-1] ) ;
   print_3(new_list);
   list.pop_back();
   if (!list.empty()) {
     max_heap(list);
     print_2(list) ;
   } // if

 } //Delete
 
} ; // Transform


BST bst;
Transform transform;
vector<Data> copy_list;
int main() {
  while( true ){
    cout << endl ;
    cout << "****** Pokemon Tree and Heap ******" << endl ;
    cout << "* 0. Quit                         *" << endl ;
    cout << "* 1. Read a file to build BST     *" << endl ;
    cout << "* 2. Transform it into Max Heap   *" << endl ;
    cout << "***********************************" << endl ;
    cout << "* 3. Delete max from Max Heap     *" << endl ;
    cout << "***********************************" << endl ;
    cout << "Input a choice(0,1,2,3):"  ;
    
    int  cmd;
    cin >> cmd ;
     
    vector<Data> new_list;
     
    if ( cmd == 2 ) {
      copy_list.clear( ) ;
       if(!use_cmd1_first) cout << "----- Execute Mission 1 first! -----" << endl ;
       else {
        for ( int i = 0 ; i < bst.list.size() ; i++ )
          copy_list.push_back(bst.list[i]) ;
         use_cmd2_first = true ;
         transform.max_heap( copy_list ) ;
         print_2(copy_list) ;
         transform.search_tree_height( copy_list, new_list);
      } //else
    } //  if
     
   else if (cmd == 0 ) break ;
   else  cout << "Command does not exist!" << endl ;
     
 } // while(true)
   
} // main

void print_2( vector<Data> new_list ) {
 cout << "  #  Name        Type 1    HP  Attack  Defense" << endl ;
 for( int i = 0 ; i < new_list.size(); ++i ) {
   cout << right << '[' << setw(2) << new_list[i].Num-1 << ']' ;
   cout << '\t' << left << setw(4) << new_list[i].Number ;
   cout << '\t' << left << setw(26)  << new_list[i].Name  ;
   cout << '\t' << left << setw(10) << new_list[i].Type ;
   cout << '\t' << left << setw(4) << new_list[i].HP ;
   cout << '\t' << left << setw(4) << new_list[i].Attack ;
   cout << '\t' << left << setw(4) << new_list[i].Defense << '\n';
 } // for
 cout << endl ;
} // print2

void readfile( vector<Data> &list ) { // read data
 list.clear() ;
 string final_file_name;
 fstream file ;
 file_name = GetNum() ;  // Get File Name
 final_file_name = "input" + file_name + ".txt" ;
 file.open( final_file_name, ios::in ) ; // open file
   
 if ( !file.is_open() ) {
   open = false ;
   cout << endl <<"### " << final_file_name << " does not exist! ###" << endl ;
 } // if
 
 else{
   open = true ;
   char cstr[255];
   int fNo,pre,pos;
   int i = 0 ;
 
   file.getline(cstr,255,'\n'); // skip the first line
 
   while (file.getline(cstr,255,'\n')) { // get data
     ++i ;
     Data oneR;
     string buf, cut;
   
     fNo = 0; // number of fields read so far
     pre = 0; // locate one field of input record
     buf.assign(cstr); // copy c-string into C++ string
     
     do{ // scan the buf from left to right
       pos = buf.find_first_of('\t',pre) ; //
       cut = buf.substr(pre,pos - pre);  //retrieve a field
       switch(++fNo){
         case 1: oneR.Number = atoi(cut.c_str());  // get school name
           break;
         case 2: oneR.Name = cut; // get the Department_name
           break;
         case 3: oneR.Type = cut; // get either day or night
           break;
         case 6: oneR.HP = atoi(cut.c_str());// get level
           break;
         case 7: oneR.Attack = atoi(cut.c_str()); // get num_students
           break;
         case 8: oneR.Defense = atoi(cut.c_str());
           break;
         
         default: break;
       } // switch
         
       pre = ++pos; // remove to the next field
     } while((pos>0) && (fNo<10));
         
     oneR.Num = i ;
     list.push_back(oneR); // save one record into theschool list
   } // while
     
 } // else
     
 file.close() ;
} // read

bool is_Num( string str ) { // check the string input is an integer or not
 for( int i = 0 ; i < str.size() ; i++ ) { // input.size can return the length of the string input
   if( str[i] >= '0' && str[i] <= '9' ) // Use ASCII to know whether the input[i] is an integer
     continue ;
   else
     return false ; // String input have an element that is not integer
 } // for
 return true ; // In string input all of the elements are an integer
} // is_Num

string GetNum( ) { // Get a number from user and make sure the number no more than
 string input ;
 while(true) {
   cout << "Input a file number :" ;
   cin >> input ;
   return input ;
 } // while
} // GetNum
